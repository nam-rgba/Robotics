// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: team.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createTeam = `-- name: CreateTeam :one
INSERT INTO team (teamname, coach_id ) VALUES ($1, $2) RETURNING team_id, coach_id, join_code, teamname, competiton_id, maxteam
`

type CreateTeamParams struct {
	Teamname sql.NullString `json:"teamname"`
	CoachID  sql.NullInt64  `json:"coach_id"`
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam, arg.Teamname, arg.CoachID)
	var i Team
	err := row.Scan(
		&i.TeamID,
		&i.CoachID,
		&i.JoinCode,
		&i.Teamname,
		&i.CompetitonID,
		&i.Maxteam,
	)
	return i, err
}

const getMaxTeamId = `-- name: GetMaxTeamId :one
SELECT maxteam FROM team WHERE team_id = $1
`

func (q *Queries) GetMaxTeamId(ctx context.Context, teamID int64) (sql.NullInt32, error) {
	row := q.db.QueryRowContext(ctx, getMaxTeamId, teamID)
	var maxteam sql.NullInt32
	err := row.Scan(&maxteam)
	return maxteam, err
}

const getNumberOfCandidates = `-- name: GetNumberOfCandidates :one
SELECT count(can_id) FROM team_candidate WHERE team_id = $1
`

func (q *Queries) GetNumberOfCandidates(ctx context.Context, teamID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNumberOfCandidates, teamID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTeam = `-- name: GetTeam :many
SELECT team_id, coach_id, join_code, teamname, competiton_id, maxteam FROM team
WHERE coach_id = $1
`

func (q *Queries) GetTeam(ctx context.Context, coachID sql.NullInt64) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, getTeam, coachID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.TeamID,
			&i.CoachID,
			&i.JoinCode,
			&i.Teamname,
			&i.CompetitonID,
			&i.Maxteam,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamById = `-- name: GetTeamById :one
SELECT team_id, coach_id, join_code, teamname, competiton_id, maxteam FROM team
WHERE team_id = $1
`

func (q *Queries) GetTeamById(ctx context.Context, teamID int64) (Team, error) {
	row := q.db.QueryRowContext(ctx, getTeamById, teamID)
	var i Team
	err := row.Scan(
		&i.TeamID,
		&i.CoachID,
		&i.JoinCode,
		&i.Teamname,
		&i.CompetitonID,
		&i.Maxteam,
	)
	return i, err
}
