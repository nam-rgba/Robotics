// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: team.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createTeam = `-- name: CreateTeam :one
INSERT INTO team (teamname, coach_id, join_code ) VALUES ($1, $2, $3) RETURNING team_id, coach_id, join_code, teamname, competiton_id, maxteam
`

type CreateTeamParams struct {
	Teamname sql.NullString `json:"teamname"`
	CoachID  sql.NullInt64  `json:"coach_id"`
	JoinCode sql.NullString `json:"join_code"`
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam, arg.Teamname, arg.CoachID, arg.JoinCode)
	var i Team
	err := row.Scan(
		&i.TeamID,
		&i.CoachID,
		&i.JoinCode,
		&i.Teamname,
		&i.CompetitonID,
		&i.Maxteam,
	)
	return i, err
}

const getTeam = `-- name: GetTeam :many
SELECT team_id, coach_id, join_code, teamname, competiton_id, maxteam FROM team
WHERE coach_id = $1
`

func (q *Queries) GetTeam(ctx context.Context, coachID sql.NullInt64) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, getTeam, coachID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.TeamID,
			&i.CoachID,
			&i.JoinCode,
			&i.Teamname,
			&i.CompetitonID,
			&i.Maxteam,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamByCode = `-- name: GetTeamByCode :one
SELECT team_id, coach_id, join_code, teamname, competiton_id, maxteam FROM team
WHERE join_code = $1
`

func (q *Queries) GetTeamByCode(ctx context.Context, joinCode sql.NullString) (Team, error) {
	row := q.db.QueryRowContext(ctx, getTeamByCode, joinCode)
	var i Team
	err := row.Scan(
		&i.TeamID,
		&i.CoachID,
		&i.JoinCode,
		&i.Teamname,
		&i.CompetitonID,
		&i.Maxteam,
	)
	return i, err
}
