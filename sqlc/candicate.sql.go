// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: candicate.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const deleteCandidate = `-- name: DeleteCandidate :exec
DELETE FROM candidate
WHERE can_id = $1
`

func (q *Queries) DeleteCandidate(ctx context.Context, canID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCandidate, canID)
	return err
}

const getCandidate = `-- name: GetCandidate :one
SELECT can_id, fullname, title, email, country, ranklocal, rankworld, company, dateofbirth, coach_id, password, is_in_team FROM candidate
WHERE can_id = $1 LIMIT 1
`

func (q *Queries) GetCandidate(ctx context.Context, canID int64) (Candidate, error) {
	row := q.db.QueryRowContext(ctx, getCandidate, canID)
	var i Candidate
	err := row.Scan(
		&i.CanID,
		&i.Fullname,
		&i.Title,
		&i.Email,
		&i.Country,
		&i.Ranklocal,
		&i.Rankworld,
		&i.Company,
		&i.Dateofbirth,
		&i.CoachID,
		&i.Password,
		&i.IsInTeam,
	)
	return i, err
}

const getCandidateByEmail = `-- name: GetCandidateByEmail :one
SELECT can_id, fullname, title, email, country, ranklocal, rankworld, company, dateofbirth, coach_id, password, is_in_team FROM candidate
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetCandidateByEmail(ctx context.Context, email sql.NullString) (Candidate, error) {
	row := q.db.QueryRowContext(ctx, getCandidateByEmail, email)
	var i Candidate
	err := row.Scan(
		&i.CanID,
		&i.Fullname,
		&i.Title,
		&i.Email,
		&i.Country,
		&i.Ranklocal,
		&i.Rankworld,
		&i.Company,
		&i.Dateofbirth,
		&i.CoachID,
		&i.Password,
		&i.IsInTeam,
	)
	return i, err
}

const getInTeam = `-- name: GetInTeam :one
SELECT is_in_team FROM candidate WHERE can_id = $1
`

func (q *Queries) GetInTeam(ctx context.Context, canID int64) (sql.NullBool, error) {
	row := q.db.QueryRowContext(ctx, getInTeam, canID)
	var is_in_team sql.NullBool
	err := row.Scan(&is_in_team)
	return is_in_team, err
}

const listCandidates = `-- name: ListCandidates :many
SELECT can_id, fullname, title, email, country, ranklocal, rankworld, company, dateofbirth, coach_id, password, is_in_team FROM candidate
ORDER BY ranklocal
LIMIT $1
`

func (q *Queries) ListCandidates(ctx context.Context, limit int32) ([]Candidate, error) {
	rows, err := q.db.QueryContext(ctx, listCandidates, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Candidate
	for rows.Next() {
		var i Candidate
		if err := rows.Scan(
			&i.CanID,
			&i.Fullname,
			&i.Title,
			&i.Email,
			&i.Country,
			&i.Ranklocal,
			&i.Rankworld,
			&i.Company,
			&i.Dateofbirth,
			&i.CoachID,
			&i.Password,
			&i.IsInTeam,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerCandidate = `-- name: RegisterCandidate :one
INSERT INTO candidate
(email, password) VALUES ($1, $2) RETURNING can_id, fullname, title, email, country, ranklocal, rankworld, company, dateofbirth, coach_id, password, is_in_team
`

type RegisterCandidateParams struct {
	Email    sql.NullString `json:"email"`
	Password string         `json:"password"`
}

func (q *Queries) RegisterCandidate(ctx context.Context, arg RegisterCandidateParams) (Candidate, error) {
	row := q.db.QueryRowContext(ctx, registerCandidate, arg.Email, arg.Password)
	var i Candidate
	err := row.Scan(
		&i.CanID,
		&i.Fullname,
		&i.Title,
		&i.Email,
		&i.Country,
		&i.Ranklocal,
		&i.Rankworld,
		&i.Company,
		&i.Dateofbirth,
		&i.CoachID,
		&i.Password,
		&i.IsInTeam,
	)
	return i, err
}

const setInTeam = `-- name: SetInTeam :exec
UPDATE candidate
SET is_in_team = $1
WHERE can_id = $2
`

type SetInTeamParams struct {
	IsInTeam sql.NullBool `json:"is_in_team"`
	CanID    int64        `json:"can_id"`
}

func (q *Queries) SetInTeam(ctx context.Context, arg SetInTeamParams) error {
	_, err := q.db.ExecContext(ctx, setInTeam, arg.IsInTeam, arg.CanID)
	return err
}

const signCoach = `-- name: SignCoach :exec
UPDATE candidate
SET coach_id = $1
WHERE can_id = $2
`

type SignCoachParams struct {
	CoachID sql.NullInt64 `json:"coach_id"`
	CanID   int64         `json:"can_id"`
}

func (q *Queries) SignCoach(ctx context.Context, arg SignCoachParams) error {
	_, err := q.db.ExecContext(ctx, signCoach, arg.CoachID, arg.CanID)
	return err
}

const updateCandidate = `-- name: UpdateCandidate :exec
UPDATE candidate
SET fullname = $1, title = $2, country = $3, company = $4, dateofbirth = $5
WHERE can_id = $6
`

type UpdateCandidateParams struct {
	Fullname    sql.NullString `json:"fullname"`
	Title       sql.NullString `json:"title"`
	Country     sql.NullString `json:"country"`
	Company     sql.NullString `json:"company"`
	Dateofbirth time.Time      `json:"dateofbirth"`
	CanID       int64          `json:"can_id"`
}

func (q *Queries) UpdateCandidate(ctx context.Context, arg UpdateCandidateParams) error {
	_, err := q.db.ExecContext(ctx, updateCandidate,
		arg.Fullname,
		arg.Title,
		arg.Country,
		arg.Company,
		arg.Dateofbirth,
		arg.CanID,
	)
	return err
}
